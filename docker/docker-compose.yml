version: "2.3"
services:
## ~/docker$ docker-compose -f docker-compose.yml up -d
##
##_____MANAGEMENT_____
##____________________ Portainer [Management/Docker]
  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    restart: always
    networks: 
      - management
    environment:
      TZ: $TZ
    command: -H unix:///var/run/docker.sock
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $USERDIR/docker/portainer/data:/data
##
##_____________________ Heimdall [Management/HOMEPAGE] 
  organizr:
    container_name: organizr
    image: organizr/organizr:latest
    restart: always
    networks: 
      - management
    security_opt:
      - no-new-privileges:true
    ports:
     - "8000:80"
    volumes:
      - $USERDIR/docker/organizr:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
      - fpm=true
##
##
##______NETWORK_______
##____________________ Unbound [NETWORK/noads-dnsserver]
  unbound:
    container_name: unbound
    image: mvance/unbound:latest
    restart: always
    volumes:
      - $USERDIR/docker/unbound/forward-records.conf:/opt/unbound/etc/unbound/forward-records.conf
    ports:
      - 5335:53/tcp
      - 5335:53/udp
##
##____________________ Unifi Controller [NETWORK/Wifi]
  unifi:
    container_name: unifi
    image: goofball222/unifi
    mac_address: d0:ca:ab:cd:ef:03
    restart: always
    networks: 
      - management
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $USERDIR/docker/unifi/cert:/usr/lib/unifi/cert
      - $USERDIR/docker/unifi/data:/usr/lib/unifi/data
      - $USERDIR/docker/unifi/logs:/usr/lib/unifi/logs
    ports:
      - 3478:3478/udp
      - 8080:8080
      - 8443:8443
      - 8001:8880
      - 8843:8843
##
##
##________CLOUD________
##_____________________ Caddy [CLOUD/web-proxy]
  caddy:
    container_name: caddy-proxy
    image: lucaslorentz/caddy-docker-proxy:ci-alpine
    restart: always
    networks: 
      - caddy-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # this volume is needed to keep the certificates
      # otherwise, new ones will be re-issued upon restart
      - $USERDIR/docker/caddy/caddy_data:/data
      - $USERDIR/docker/caddy/config:/config
    ports:
      - 80:80
      - 443:443
##_____________________ Firefox Sync [CLOUD/Browser] 
# generate secret.txt first see docker-config.sh
  firefox-syncserver:
    image: crazymax/firefox-syncserver:latest
    container_name: firefox_syncserver
    restart: always
    networks: 
      - caddy-proxy
    environment: 
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      FF_SYNCSERVER_PUBLIC_URL: https://firefox.$DOMAIN
      FF_SYNCSERVER_SECRET: $FFSYNCSECRET
      FF_SYNCSERVER_FORWARDED_ALLOW_IPS: '*'
      FF_SYNCSERVER_FORCE_WSGI_ENVIRON: 'true'
      FF_SYNCSERVER_ALLOW_NEW_USERS: 'true'
      FF_SYNCSERVER_LOGLEVEL: debug
      FF_SYNCSERVER_ACCESSLOG: 'true'
    volumes:
      - $USERDIR/docker/firefox-syncserver:/data
    labels:
      caddy: firefox.$DOMAIN
      caddy.reverse_proxy: "{{upstreams 5000}}"
      caddy.tls: $EMAIL
##_____________________ Bitwarden [CLOUD/Password-manager] 
  bitwarden:
    image: bitwardenrs/server:latest
    container_name: bitwarden
    restart: always
    networks: 
      - caddy-proxy
    volumes:
      - $USERDIR/docker/bitwarden:/data
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      WEBSOCKET_ENABLED: 'true'
      DOMAIN: https://bw.$DOMAIN
      SIGNUPS_ALLOWED: 'false'
      ADMIN_TOKEN: $BITWARDENTOKEN
    labels:
      caddy: bw.$DOMAIN
      caddy.reverse_proxy_0: "{{upstreams 80}}"
      caddy.tls: $EMAIL
      # Required extra headers
      caddy.encode: gzip
      caddy.header.X-XSS-Protection: '"1; mode=block;"'
      caddy.header.X-Frame-Options: "DENY"
      caddy.header.X-Content-Type-Options: "none"
      caddy.reverse_proxy_1: "/notifications/hub/negotiate {{upstreams 80}}"
      caddy.reverse_proxy_2: "/notifications/hub {{upstreams 3012}}"
##
##____________________ Syncthing [CLOUD/Sync]
  syncthing:
    container_name: syncthing
    image: syncthing/syncthing
    restart: always
    networks: 
      - caddy-proxy
    volumes:
      - "$USERDIR/docker/syncthing/config:/var/syncthing/config"
      - "/mnt/pool/Users:/var/syncthing"
    ports:
      #- "8384:8384"
      - "22000:22000/tcp"
      - "22000:22000/udp"
    labels:
      caddy: sync.$DOMAIN
      caddy.reverse_proxy: "{{upstreams 8384}}"
      caddy.tls: $EMAIL
##
##____________________ FileRun [CLOUD/Files]
  filerun:
    image: afian/filerun
    container_name: filerun
    restart: always
    networks: 
      - caddy-proxy
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      FR_DB_HOST: mariadb
      FR_DB_PORT: 3306
      FR_DB_NAME: filerundb
      FR_DB_USER: $USER
      FR_DB_PASS: $PW_INT
      APACHE_RUN_USER: $USER
      APACHE_RUN_USER_ID: $PUID
      APACHE_RUN_GROUP: $USER
      APACHE_RUN_GROUP_ID: $PGID
    depends_on:
      - mariadb
      - filerun-tika
      - filerun-elasticsearch
    volumes:
      - $USERDIR/docker/filerun/html:/var/www/html
      - /mnt/pool/Users:/user-files:rw
      - /mnt/pool/Users/Local/Asterix:/user-files/Local/$USER1/Asterix:rw
      - /mnt/pool/Users/Local/Asterix:/user-files/Local/$USER2/Asterix:rw
    labels:
      caddy: files.$DOMAIN
      caddy.reverse_proxy: "{{upstreams 80}}"
      caddy.tls: $EMAIL
      # Required extra headers
      caddy.file_server: "" # required for FileRun
      caddy.encode: gzip    # required for FileRun   
      caddy.header.Strict-Transport-Security: '"max-age=31536000;"' # Required for FileRun+OnlyOffice 
      caddy.header.X-XSS-Protection: '"1; mode=block;"'             # Required for FileRun+OnlyOffice
      caddy.header.X-Content-Type-Options: "nosniff"                # Required for FileRun+OnlyOffice
      caddy.header.X-Frame-Options: "SAMEORIGIN"                    # Required for FileRun+OnlyOffice
##____________________ Filerun database [CLOUD/Files/Database]
  mariadb:
    image: mariadb:10.1
    container_name: filerun-mariadb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: $PW_INT
      MYSQL_USER: $USER
      MYSQL_PASSWORD: $PW_INT
      MYSQL_DATABASE: filerundb
    volumes:
      - $USERDIR/docker/filerun/db:/var/lib/mysql
##____________________ FileRun Tikaserver [CLOUD/Files/tika]
  filerun-tika:
    image: logicalspark/docker-tikaserver
    container_name: filerun-tika
##____________________ FileRun ElasticSearch [CLOUD/Files/search]
  filerun-elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4
    container_name: filerun-elasticsearch
    restart: always
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      cluster.name: docker-cluster
      bootstrap.memory_lock: 'true'
      ES_JAVA_OPTS: '-Xms512m -Xmx512m'
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
    volumes:
      - $USERDIR/docker/filerun/esearch:/usr/share/elasticsearch/data
##
##_____________________ OnlyOffice Document Server [Cloud/Office]
  onlyoffice:
    image: onlyoffice/documentserver
    container_name: onlyoffice
    stdin_open: 'true'
    restart: always
    networks: 
      - caddy-proxy
    tty: 'true'
    volumes:
      - $USERDIR/docker/onlyoffice/data:/var/www/onlyoffice/Data
      - $USERDIR/docker/onlyoffice/log:/var/log/onlyoffice
      - $USERDIR/docker/onlyoffice/cache:/var/lib/onlyoffice/documentserver/App_Data/cache/files
      - $USERDIR/docker/onlyoffice/example:/var/www/onlyoffice/documentserver-example/public/files
      - $USERDIR/docker/onlyoffice/fonts:/usr/share/fonts
    dns: 9.9.9.9
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      JWT_ENABLED: 'true'
      JWT_SECRET: $ONLYOFFICEJWT
    labels:
      caddy: office.$DOMAIN
      caddy.reverse_proxy: "{{upstreams 80}}"
      caddy.tls: $EMAIL
      # Required extra headers
      caddy.file_server: ""
      caddy.encode: gzip
      caddy.header.X-Content-Type-Options: "nosniff"
##
##
##________MEDIA________
##_____________________ Jellyfin [MEDIA/Library] 
  jellyfin:
    container_name: jellyfin
    image: linuxserver/jellyfin
    restart: always
    networks: 
      - media
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      UMASK_SET: 022 #optional
    group_add:
      - 122
    volumes:
      - $USERDIR/docker/jellyfin/config:/config
      - /mnt/pool/Users/Local/Asterix/TV/TVshows:/data/tvshows
      - /mnt/pool/Users/Local/Asterix/TV/Movies:/data/movies
      - /mnt/pool/Users/Local/Asterix/TV/Music:/data/music
    ports:
      - 8096:8096
      - 8920:8920 #optional
    # Required for Intel QuickSync/VAAPI hardware accelerated video encoding/transcoding
    devices:
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
##
##____________________ vpn-proxy [MEDIA/vpn-client-for-media]
  vpn:
    container_name: VPN-proxy
    image: thrnz/docker-wireguard-pia
    restart: always
    networks: 
      - vpn-proxy
    volumes:
      # Auth token is stored here
      - $USERDIR/docker/vpn/pia:/pia
      # If enabled, the forwarded port is dumped to /pia-shared/port.dat for potential use in other containers
      - $USERDIR/docker/vpn/pia-shared:/pia-shared
    cap_add:
      - NET_ADMIN
      #- SYS_MODULE might not be needed with a 5.6+ kernel?
      #- SYS_MODULE
      # Mounting the tun device may be necessary for userspace implementations
      #devices:
      #- /dev/net/tun:/dev/net/tun
    environment:
      LOCAL_NETWORK: 192.168.88.0/24,10.6.0.1/24
      LOC: de-frankfurt
      USER: $VPN_USER_PIA
      PASS: $VPN_PW_PI 
      #KEEPALIVE: 25
      #VPNDNS: 8.8.8.8,8.8.4.4
      PORT_FORWARDING: 1
      PORT_PERSIST: 
      #WG_USERSPACE: 1
    privileged: 'true'
    sysctls:
      # wg-quick fails to set this without --privileged, so set it here instead if needed
      - net.ipv4.conf.all.src_valid_mark=1
      # May as well disable ipv6. Should be blocked anyway.
      - net.ipv6.conf.default.disable_ipv6=1
      - net.ipv6.conf.all.disable_ipv6=1
      - net.ipv6.conf.lo.disable_ipv6=1
    # The container has no recovery logic. Use a healthcheck to catch disconnects.
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - 9091:9091 #Transmission
      - 6789:6789 #NZBget
##
##____________________ Transmission [MEDIA/download-client]
  transmission:
    image: linuxserver/transmission
    container_name: transmission
    network_mode: service:vpn
    depends_on:
      - vpn
    restart: always
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
      TRANSMISSION_WEB_HOME: /transmission-web-control/
      USER: $USER_MEDIA
      PASS: $PW_MEDIA
    volumes:
      - $USERDIR/docker/transmission/config:/config
      - /mnt/pool/Users/Local/Asterix/TV:/media
      - /mnt/pool/Users/Local/Asterix/TV/incoming/blackhole:/watch
##
##____________________ NZBget [MEDIA/download-client]
  nzbget:
    container_name: nzbget
    image: linuxserver/nzbget:latest
    network_mode: service:vpn
    depends_on:
      - vpn
    restart: always
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    volumes:
      - $USERDIR/docker/nzbget/config:/config
      - /mnt/pool/Users/Local/Asterix/TV:/media
##
##____________________ Sonarr [MEDIA/PVR-TVshows]
  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:preview
    networks: 
      - media
    depends_on:
      - transmission
    restart: always
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $USERDIR/docker/sonarr/config:/config
      - /mnt/pool/Users/Local/Asterix/TV:/media
    ports:
      - 8989:8989
##
##____________________ Jackett [MEDIA/torrent-proxy for Sonarr&Radarr]
  jackett:
    container_name: jackett
    image: linuxserver/jackett:latest
    networks: 
      - media
    depends_on:
      - transmission
    restart: always
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    volumes:
      - $USERDIR/docker/jackett/config:/config
      - /etc/localtime:/etc/localtime:ro
      - /mnt/pool/Users/Local/Asterix/TV:/media
    ports:
      - 9117:9117
  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    networks: 
      - media
    environment:
      - LOG_LEVEL=info
      - CAPTCHA_SOLVER=hcaptcha-solver
      #- CAPTCHA_SOLVER=harvester
      #- HARVESTER_ENDPOINT=https://127.0.0.1:5000/token
    ports:
      - 8191:8191
    restart: unless-stopped 
##
##____________________ Radarr [MEDIA/PVR-Movies]
  radarr:
    container_name: radarr
    image: linuxserver/radarr:latest
    networks: 
      - media
    depends_on:
      - transmission
    restart: always
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - $USERDIR/docker/radarr/config:/config
      - /mnt/pool/Users/Local/Asterix/TV:/media
    ports:
      - 7878:7878
##
##____________________ Bazarr [MEDIA/subtitle-proxy for Sonarr&Radarr]
  bazarr:
    container_name: bazarr
    image: linuxserver/bazarr
    networks: 
      - media
    depends_on:
       - sonarr
       - radarr
    restart: always
    environment:
      PUID: $PUID
      PGID: $PGID
      TZ: $TZ
    volumes:
      - $USERDIR/docker/bazarr/config:/config
      - /mnt/pool/Users/Local/Asterix/TV:/media
    ports:
      - 6767:6767
#
#
volumes:
  postgresql_data:
networks:
  management:
    driver: bridge
  web-proxy:
    driver: bridge
  vpn-proxy:
    driver: bridge
  media: 
    driver: bridge
