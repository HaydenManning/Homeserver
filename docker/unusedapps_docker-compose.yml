# ARCHIVED!
version: "2.0"
services:
# THIS FILE CONTAINS SERVICES THAT I NO LONGER USE:
# PiHole: switched to AdGuard Home as it is much more clean, lightweight and a single executable, no need to run in Docker.
# SyncThing: installed directly on host (Docker makes no sense here)
# Heimdall: Organizr is a much better alternative.
# Duplicati: too many reports of issues. Never used it. Using LuckyBackup instead (app for Linux).
# Prometheus, Grafana etc: I use Netdata which gives plenty of monitoring info, enough for me.
##
## I still use Caddy, added it here to complete the Nextcloud setup
##_____________________ Caddy [CLOUD/web-proxy]
  caddy:
    container_name: caddy-proxy
    image: lucaslorentz/caddy-docker-proxy:ci-alpine
    restart: always
    networks: 
      - web-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $DOCKERDIR/caddy/caddy_data:/data
      - $DOCKERDIR/caddy/config:/config
      - $DOCKERDIR/nextcloud/var/www/html:/nextcloud/var/www/html
      - $DOCKERDIR/nextcloud/var/data:/nextcloud/var/nextdata
    ports:
      - 80:80
      - 443:443
##
##____________________ NextCloud TESTED V21.0 [CLOUD/Files/NextCloud]
  nextcloud:
    image: nextcloud:21-fpm
    container_name: nextcloud
    restart: always
    mem_limit: 2048m
    mem_reservation: 512m
    networks:
      - web-proxy
      - nextcloud
    depends_on:
      - nextcloud-db
      - nextcloud-cache
    environment:
      NEXTCLOUD_DATA_DIR: /var/nextdata
      NEXTCLOUD_TRUSTED_DOMAINS: next.$DOMAIN
      NEXTCLOUD_ADMIN_USER: $USER1
      NEXTCLOUD_ADMIN_PASSWORD: $USER1PW
      POSTGRES_HOST: nextcloud-db
      POSTGRES_DB: nextcloud
      POSTGRES_USER: $USER
      POSTGRES_PASSWORD: $PW_INT
      REDIS_HOST: nextcloud-cache
      REDIS_HOST_PASSWORD: $PW_INT
      SMTP_HOST: $SMTPHOST
      SMTP_SECURE: tls
      SMTP_NAME: $SMTPUSER
      SMTP_PASSWORD: $SMTPPASS
      SMTP_FROM_ADDRESS: $EMAIL
      SMTP_PORT: 587
    volumes:
        # the actual data of the Nextcloud:
      - $DOCKERDIR/nextcloud/var/nextdata:/var/nextdata
        # Main folder needed for updating:
      - $DOCKERDIR/nextcloud/var/www/html:/var/www/html
        # local configuration
      - $DOCKERDIR/nextcloud/var/www/html/config:/var/www/html/config
        # Custom settings for php fpm to make nextcloud work. The default settings resulted in the error:
        # WARNING: [pool www] server reached pm.max_children setting (5), consider raising it
      - $DOCKERDIR/nextcloud/etc/www-custom.ini:/usr/local/etc/php-fpm.d/zz-custom.conf
    labels:
      caddy: next.$DOMAIN
      caddy.tls: $EMAIL
      caddy.file_server: "" 
      caddy.root: "* /nextcloud/var/www/html"
      caddy.php_fastcgi: "{{upstreams 9000}}"
      caddy.php_fastcgi.root: "/var/www/html"
      caddy.php_fastcgi.env: "front_controller_active true"
      caddy.encode: gzip
      caddy.redir_0: "/.well-known/carddav /remote.php/dav 301"
      caddy.redir_1: "/.well-known/caldav /remote.php/dav 301"
      caddy.header.Strict-Transport-Security: '"max-age=15768000;includeSubDomains;preload"' # Required for Nextcloud
      #caddy.header.X-XSS-Protection: '"1; mode=block;"'             # Required for FileRun+OnlyOffice
      #caddy.header.X-Content-Type-Options: "nosniff"                # Required for FileRun+OnlyOffice
      #caddy.header.X-Frame-Options: "SAMEORIGIN"                    # Required for FileRun+OnlyOffice
##____________________ NextCloud [CLOUD/Files/NextCloud/database]
  nextcloud-db:
    container_name: nextcloud-db
    image: postgres:12-alpine
    restart: always
    networks:
      - nextcloud
    environment:
      POSTGRES_USER: $USER
      POSTGRES_PASSWORD: $PW_INT
    volumes:
      - $DOCKERDIR/nextcloud/db:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
##____________________ NextCloud [CLOUD/Files/NextCloud/cache]
  nextcloud-cache:
    container_name: nextcloud-cache
    image: redis:alpine
    restart: always
    mem_limit: 2048m
    mem_reservation: 512m
    networks:
      - nextcloud
    command: redis-server --requirepass $PW_INT
#
networks:
  web-proxy:
    driver: bridge
  nextcloud:
    driver: bridge



##____________________ PiHole 2 [NETWORK/recursive-dnsserver]
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    restart: always
    mac_address: d0:ca:ab:cd:ef:01
    cap_add:
      - NET_ADMIN
    networks:
      DNS-network:
        ipv4_address: 192.168.88.99
    environment:
      ServerIP: 192.168.88.99
      WEBPASSWORD: $PW_INT
      PHP_ENV_CONFIG: "/etc/lighttpd/conf-enabled/15-fastcgi-php.conf"
      TZ: $TZ
      DNS1: 192.168.88.89#53
      DNS2: 127.0.0.1
    volumes:
      - $USERDIR/docker/pihole/dnsmasq.d:/etc/dnsmasq.d:rw
      - $USERDIR/docker/pihole:/etc/pihole:rw
      - /etc/localtime:/etc/localtime:ro
      - $USERDIR/docker/pihole/var-log/pihole.log:/var/log/pihole.log
    ports:
      - 443/tcp
      - 53/tcp
      - 53/udp
      - 67/udp
      - 80/tcp
    dns:
      - 127.0.0.1
      - 192.168.88.89#53
# networks macvlan for pi-hole and unbound. Might be useful if you need them to have real LAN IPs. I don't need it anymore. 
networks:
  DNS-network:
    driver: macvlan
    driver_opts:
      parent: eno1
    ipam:
      config:
        - subnet: 192.168.88.0/24
          gateway: 192.168.88.1
          ip_range: 192.168.88.0/29
          aux_addresses:
            router: 192.168.88.1
            PiHole-1: 192.168.88.2
  monitor-net:
    driver: bridge
##    
## 
##____________________ Duplicati [CLOUD/Backup]
  duplicati:
    image: linuxserver/duplicati
    container_name: duplicati
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
#      - CLI_ARGS= #optional
    volumes:
      - $USERHOME/docker/duplicati/config:/config
      - /mnt/pool/Backups:/backups
      - /mnt/pool/Users:/source
    ports:
      - 8200:8200
    restart: unless-stopped
##_____________________ Heimdall [Management/HOMEPAGE] 
  heimdall:
    container_name: heimdall
    image: linuxserver/heimdall:latest
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    ports:
     - "8080:80"
    volumes:
      - $USERHOME/docker/heimdall:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
##
##____________________ Prometheus [Monitoring/Logging]
  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.18.1
    restart: always
    environment:
      - TZ=$TZ
    volumes:
      - $USERHOME/docker/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - monitor-net
##____________________ Alertmanager [Monitoring/Alerts]
  prometheus-alertmanager:
    container_name: prometheus-alertmanager
    image: prom/alertmanager:v0.20.0
    restart: always
    environment:
      - TZ=$TZ
    volumes:
      - $USERHOME/docker/prometheus/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    networks:
      - monitor-net
##____________________ Nodes [Monitoring/]
  nodeexporter:
    image: prom/node-exporter:v0.18.1
    container_name: nodeexporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    ports:
      - "9100:9100"
    networks:
      - monitor-net
##____________________ Cadvisor [Monitoring/Docker]
  cadvisor:
    image: gcr.io/google-containers/cadvisor:v0.36.0
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro 
    restart: unless-stopped
    ports:
      - "9180:8080"
    networks:
      - monitor-net
##____________________ Pushgateway [Monitoring/Pushgateway]
  pushgateway:
    image: prom/pushgateway:v1.2.0
    container_name: pushgateway
    restart: unless-stopped
    ports:
      - 9191:9091
    networks:
      - monitor-net
##____________________ Grafana [Monitoring/Dashboard]
  grafana:
    container_name: grafana
    image: grafana/grafana:7.0.3
    restart: always
    environment:
      - TZ=${TZ}
      - GF_SECURITY_ADMIN_USER=${USER}
      - GF_SECURITY_ADMIN_PASSWORD=${PW_EXT}
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp_relay:25
      - GF_SMTP_FROM_ADDRESS=${EMAIL}
#      - GF_SERVER_DOMAIN=grafana.$DOMAIN
#      - GF_SERVER_ROOT_URL=https://grafana.$DOMAIN
#      - VIRTUAL_HOST=grafana.$DOMAIN
#      - VIRTUAL_PORT=3000
#      - VIRTUAL_PROTO=http
#      - LETSENCRYPT_HOST=grafana.$DOMAIN
#      - LETSENCRYPT_EMAIL=${EMAIL}
    volumes:
#      - grafana_data:/var/lib/grafana
      - $USERHOME/docker/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - monitor-net
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.grafana-redirect.redirectscheme.scheme=https
      - traefik.http.routers.grafana-redirect.entrypoints=web
      - traefik.http.routers.grafana-redirect.middlewares=grafana-redirect
      - traefik.http.routers.grafana-redirect.rule=Host(`grafana.$DOMAIN`)
      - traefik.http.routers.grafana.entrypoints=websecure
      - traefik.http.routers.grafana.rule=Host(`grafana.$DOMAIN`)
      - traefik.http.routers.grafana.tls.certresolver=letsencrypt
      - traefik.http.services.grafana.loadbalancer.server.port=3000
volumes:
  prometheus_data: {}
  grafana_data: {}

